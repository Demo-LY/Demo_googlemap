package com.example.leonwang.demo_google1003.Utils;import java.util.List;import android.app.Activity;import android.app.ActivityManager;import android.content.Context;import android.content.Intent;import android.content.pm.PackageManager;import android.content.pm.ResolveInfo;import android.os.Bundle;import android.os.Debug;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentActivity;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentTransaction;import android.view.Gravity;import android.view.inputmethod.InputMethodManager;import android.widget.Toast;import com.example.leonwang.demo_google1003.R;import com.example.leonwang.demo_google1003.Dtos.FragmentDTO;import com.example.leonwang.demo_google1003.Fragments.MapsFragment;import com.example.leonwang.demo_google1003.Fragments.SearchFragment;import com.example.leonwang.demo_google1003.Fragments.UserInfoFragment;import com.example.leonwang.demo_google1003.mains.UserApplication;/** * 业务处理转换工具类 *  * @author Administrator *  */public class TranseTools { 	/**	 * 提示信息	 * 	 * @param context	 * @param str	 *            提示内容	 */	public static int maxFramgentNum = 10;	public static void infoHint(Context context, String str) {        if (context == null) return;		Toast toast = Toast.makeText(context, str, Toast.LENGTH_SHORT);		toast.setGravity(Gravity.CENTER, 0, 0);		toast.show();	}	//	/**//	 * 显示网络状态//	 *///	public static void showNetState(Context context) {//		int t = NetStateReceiver.getAPNType(context);//		switch (t) {//		case NetStateReceiver.NETWORKTYPE_UNKNOWN://没有网络//			infoHint(context, "没有网络！");//			break;//		case NetStateReceiver.NETWORKTYPE_2G://			infoHint(context, "当前是2G网络，可能较慢");//			break;//		case NetStateReceiver.NETWORKTYPE_3G:////			infoHint(context, "当前是3G网络！");//			break;//		case NetStateReceiver.NETWORKTYPE_WIFI:////			infoHint(context, "当前是wifi网络！");//			break;//		default://			break;//		}//	}	public static void pushFragMents(FragmentActivity context, Fragment fm, int tabidx, boolean isAnima, boolean isBack, boolean isAdd, String[] args) {		if (context == null) return;        boolean isRun = isCurrrentPackageRun(context);		if(!isRun)			return;		if(context.isFinishing() )			return;		dismissSoftInput(context);        FragmentManager fmr = context.getSupportFragmentManager();        FragmentTransaction ft = fmr.beginTransaction();        int mfSize = UserApplication.getInstance().getMfStacks().size();//		if (isAdd && isAnima) {			FragmentDTO dto = new FragmentDTO();			dto.setFragment(fm);			dto.setTabidx(tabidx);//			if (mfSize > maxFramgentNum) {//				UserApplication.getInstance().getMfStacks().remove(1);//			}			UserApplication.getInstance().getMfStacks().push(dto);//		}		if (args != null) {			Bundle bundles = fm.getArguments() == null ? new Bundle() : fm.getArguments();			bundles.putStringArray("key", args);			fm.setArguments(bundles);		}				//12f lp 跳个人中心界面没有动画		if(UserInfoFragment.class.isInstance(fm) ||                MapsFragment.class.isInstance(fm) ||                SearchFragment.class.isInstance(fm)){			isAnima = false;		}		if (isAnima) {			if (isBack) {				ft.setCustomAnimations(R.anim.slide_in_left, R.anim.slide_out_right);			} else {				ft.setCustomAnimations(R.anim.slide_in_right, R.anim.slide_out_left);			}		}		ft.replace(R.id.realtabcontent, fm);		ft.addToBackStack(null);		ft.commitAllowingStateLoss();	}	/**	 * add by windy 界面跳转时候的代码，	 * 	 * @Title: pushFragMents	 * @Description: TODO(这里用一句话描述这个方法的作用)	 * @param context	 * @param fm	 * @param tabidx	 * @param isAnima	 * @param isBack	 * @param isAdd	 * @param args	 * @param extraData	 *            传递的值的列表	 * @return	 * @throws	 */	public static void pushFragMents(FragmentActivity context, Fragment fm, int tabidx, boolean isAnima, boolean isBack, boolean isAdd, String[] args, Bundle extraData) {        if (context == null) return;        boolean isRun = isCurrrentPackageRun(context);		if(!isRun)			return;		if(context.isFinishing() )			return;        UserApplication.getInstance().setCurrentFragment(fm);		dismissSoftInput(context);        FragmentManager fmr = context.getSupportFragmentManager();        FragmentTransaction ft = fmr.beginTransaction();        int mfSize = UserApplication.getInstance().getMfStacks().size();//		if (isAdd && isAnima) {			FragmentDTO dto = new FragmentDTO();			dto.setFragment(fm);			dto.setTabidx(tabidx);			if (mfSize>maxFramgentNum) {				UserApplication.getInstance().getMfStacks().remove(1);			}			UserApplication.getInstance().getMfStacks().push(dto);//		}        if(UserInfoFragment.class.isInstance(fm) ||                MapsFragment.class.isInstance(fm) ||                SearchFragment.class.isInstance(fm)){            isAnima = false;        }		// Fragment值传递的时候进行传递		Bundle bundles = fm.getArguments() == null ? new Bundle() : fm.getArguments();		if (args != null) {			bundles.putStringArray("key", args);		}		if (extraData != null) {			bundles.putAll(extraData);		}		fm.setArguments(bundles);		if (isAnima) {            ft.setCustomAnimations(R.anim.slide_in_right, R.anim.slide_out_left, R.anim.slide_in_left, R.anim.slide_out_right);//			if (isBack) {//				ft.setCustomAnimations(R.anim.slide_in_left, R.anim.slide_out_right);//			} else {//				ft.setCustomAnimations(R.anim.slide_in_right, R.anim.slide_out_left);//			}		}		ft.replace(R.id.realtabcontent, fm);		ft.addToBackStack(null);		ft.commitAllowingStateLoss();	}	public static void popFragMents(FragmentActivity context) {        if (context == null) return;		if(context.isFinishing() )			return;		dismissSoftInput(context);		FragmentManager fmr = context.getSupportFragmentManager();		UserApplication.getInstance().getMfStacks().pop();        if (UserApplication.getInstance().getMfStacks().empty()) {            UserApplication.getInstance().setCurrentFragment(null);        } else {            UserApplication.getInstance().setCurrentFragment(UserApplication.getInstance().getMfStacks().peek().getFragment());        }        if(fmr.getBackStackEntryCount()>0)        	fmr.popBackStack();	}	/**	 * 	 * @param context	 * @param fragmentClassName fragment类名，包括包名	 */    public static void popToFragMents(FragmentActivity context, String fragmentClassName) {        if (context == null) return;        boolean isRun = isCurrrentPackageRun(context);        if(!isRun)            return;        if(context.isFinishing() )            return;        dismissSoftInput(context);        int mfSize = UserApplication.getInstance().getMfStacks().size();        FragmentManager fmr = context.getSupportFragmentManager();        boolean flag = false;        for (int i = mfSize - 1; i > 0; i--) {            FragmentDTO fragmentDTO = UserApplication.getInstance().getMfStacks().elementAt(i);            if (fragmentDTO.getFragment().getClass().getName().equals(fragmentClassName)) {                flag = true;                break;            }        }        if (flag) {            for (int i = mfSize - 1; i > 0; i--) {                FragmentDTO fragmentDTO = UserApplication.getInstance().getMfStacks().elementAt(i);                if (fragmentDTO.getFragment().getClass().getName().equals(fragmentClassName)) {//                    fmr.popBackStack();//                    UserApplication.getInstance().getMfStacks().pop();                    UserApplication.getInstance().setCurrentFragment(fragmentDTO.getFragment());                    break;                } else {                	if(fmr.getBackStackEntryCount()>0)                		fmr.popBackStack();                    UserApplication.getInstance().getMfStacks().pop();                }            }//            pushFragMents(context, fragment, 0, false, false, true, null);        } else {            pushFragMents(context, Fragment.instantiate(context, fragmentClassName), 0, false, false, true, null);        }    }	public static void popToFirstFragMents(FragmentActivity context) {        if (context == null) return;		boolean isRun = isCurrrentPackageRun(context);		if(!isRun)			return;		if(context.isFinishing() )			return;		dismissSoftInput(context);		int mfSize = UserApplication.getInstance().getMfStacks().size();		FragmentManager fmr = context.getSupportFragmentManager();		FragmentDTO dto = null;		if (mfSize >= 2) {			for(int i = mfSize -1; i > 0; i--){				if(fmr.getBackStackEntryCount()>0)					fmr.popBackStack();				UserApplication.getInstance().getMfStacks().pop();//				if(i == mfSize-3){//					dto = UserApplication.getInstance().getMfStacks().elementAt(mfSize-2-i);////					Fragment fm = dto.getFragment();////					FragmentTransaction fmt = fmr.beginTransaction();//					fmt.setCustomAnimations(R.anim.slide_in_left, R.anim.slide_out_right);//					fmt.replace(R.id.realtabcontent, fm);//					fmt.addToBackStack(null);//					fmt.commitAllowingStateLoss();//					break;//				}			}            UserApplication.getInstance().setCurrentFragment(UserApplication.getInstance().getMfStacks().peek().getFragment());		}else{            assert (false);			dto = UserApplication.getInstance().getMfStacks().elementAt(0);			Fragment fm = dto.getFragment();						UserApplication.getInstance().getMfStacks().pop();            UserApplication.getInstance().setCurrentFragment(UserApplication.getInstance().getMfStacks().peek().getFragment());			FragmentTransaction fmt = fmr.beginTransaction();			fmt.setCustomAnimations(R.anim.slide_in_left, R.anim.slide_out_right);			fmt.replace(R.id.realtabcontent, fm);			fmt.addToBackStack(null);			fmt.commitAllowingStateLoss();		}	}		/*public static void popTologinFragMents(FragmentActivity context) {        if (context == null) return;		if(context.isFinishing() )			return;		dismissSoftInput(context);		LoginUtil.mLoginFrom="";		Intent i = new Intent(context, LoginActivity.class);		context.startActivityForResult(i, 300);						}*/		public static void popToMapsFragMents(FragmentActivity context) {		popToMapsFragMents(context, true);	}		public static void popToMapsFragMents(FragmentActivity context, boolean anim) {        if (context == null) return;		if(context.isFinishing() )			return;		dismissSoftInput(context);		int mfSize =  UserApplication.getInstance().getMfStacks().size();		FragmentManager fmr = context.getSupportFragmentManager();		FragmentDTO dto = null;		if (mfSize >= 2) {			for (int i = mfSize - 1; i > 0; i--) {				dto = UserApplication.getInstance().getMfStacks().elementAt(i);				Fragment fm = dto.getFragment();				if(fm instanceof MapsFragment){					//					FragmentTransaction fmt = fmr.beginTransaction();//					if(anim){//						fmt.setCustomAnimations(R.anim.slide_in_left, R.anim.slide_out_right);//					}//					fmt.replace(R.id.realtabcontent, fm);//					fmt.addToBackStack(null);//					fmt.commitAllowingStateLoss();                    UserApplication.getInstance().setCurrentFragment(fm);					break;				}else{					if(fmr.getBackStackEntryCount()>0)						fmr.popBackStack();					UserApplication.getInstance().getMfStacks().pop();				}							}					}	}		//pop到userInfoFragment，如果最后也没有该栈中没有，再创建一个新的	public static void popToUserInfoFragment(FragmentActivity context) {        if (context == null) return;		if(context.isFinishing() )			return;		dismissSoftInput(context);		int mfSize =  UserApplication.getInstance().getMfStacks().size();		FragmentManager fmr = context.getSupportFragmentManager();		FragmentDTO dto = null;        boolean flag = false;//		if (mfSize >= 2) {			for (int i = mfSize-1; i > 0; i--) {				dto = UserApplication.getInstance().getMfStacks().elementAt(i);				Fragment fm = dto.getFragment();				if(fm instanceof UserInfoFragment){//					FragmentTransaction fmt = fmr.beginTransaction();//					fmt.replace(R.id.realtabcontent, fm);//					fmt.addToBackStack(null);//					fmt.commitAllowingStateLoss();                    flag = true;                    UserApplication.getInstance().setCurrentFragment(fm);					return;				}else{					if(fmr.getBackStackEntryCount()>0)						fmr.popBackStack();					UserApplication.getInstance().getMfStacks().pop();				}			}//		}	}    //此函数的作用是，弹出所有home页面之前所有的Fragment	public static void popFragMentsToFirstHome(FragmentActivity context) {        if (context == null) return;		if(context.isFinishing() ){			QLog.error("该应用已经停止运行");			TranseTools.infoHint(context, "该应用已经停止运行");			return;		}		FragmentManager fmr = context.getSupportFragmentManager();		int mfSize =  UserApplication.getInstance().getMfStacks().size();		FragmentDTO dto = null;        for (int i = mfSize -1; i > 0; i--) {            dto = UserApplication.getInstance().getMfStacks().elementAt(i);            Fragment fm = dto.getFragment();            if(!(fm instanceof MapsFragment)){            	if(fmr.getBackStackEntryCount()>0)            		fmr.popBackStack();                UserApplication.getInstance().getMfStacks().pop();            } else {                UserApplication.getInstance().setCurrentFragment(fm);                break;            }        }	}		public static boolean isFirstOfMapsFragMents() {		int mfSize =  UserApplication.getInstance().getMfStacks().size();				if (mfSize >0) {						FragmentDTO dto = UserApplication.getInstance().getMfStacks().elementAt(0);			Fragment fm = dto.getFragment();			if(fm instanceof MapsFragment){								return true;			}else{				return false;			}		}		return false;	}	/**	 * 隐藏软键盘	 */	public static void dismissSoftInput(Activity activity) {        if (activity == null) return;		if (activity.getCurrentFocus() != null) {			((InputMethodManager) activity					.getSystemService(Context.INPUT_METHOD_SERVICE))					.hideSoftInputFromWindow(activity.getCurrentFocus()							.getWindowToken(),							InputMethodManager.HIDE_NOT_ALWAYS);		}	}		//获取所有应用包名	public static boolean isCurrrentPackageRun(Activity context) {		if(context == null){			QLog.error("该应用已经销毁");			TranseTools.infoHint(context, "该应用已经销毁");			return false;		}		ConfigManager configManager = new ConfigManager(context);		String packageName = configManager.getAppName();		ActivityManager activityManger = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);		List<ActivityManager.RunningAppProcessInfo> list = activityManger				.getRunningAppProcesses();		if (list != null) {			for (int i = 0; i < list.size(); i++) {				ActivityManager.RunningAppProcessInfo apinfo = list.get(i);				String[] pkgList = apinfo.pkgList;								for (int j = 0; j < pkgList.length; j++) {					String package_Name=pkgList[j];				    if(packageName.equals(package_Name)){						    return true;				    }				}			}		}		QLog.error("该应用已经不再运行");		TranseTools.infoHint(context, "该应用已经不再运行");		return false;	}		//获取所有应用包名	public static boolean getPackageRunCache(FragmentActivity context) {		if(context == null){			QLog.error("该应用已经销毁");			TranseTools.infoHint(context, "该应用已经销毁");			return false;		}		ConfigManager configManager = new ConfigManager(context);		String packageName = configManager.getAppName();		ActivityManager activityManger = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);		List<ActivityManager.RunningAppProcessInfo> list = activityManger				.getRunningAppProcesses();		if (list != null) {			for (int i = 0; i < list.size(); i++) {				ActivityManager.RunningAppProcessInfo apinfo = list.get(i);								String[] pkgList = apinfo.pkgList;								for (int j = 0; j < pkgList.length; j++) {					String package_Name=pkgList[j];				    if(packageName.equals(package_Name)){				    					    	 // 进程ID号  					    int pid = apinfo.pid;  					    // 用户ID  					    int uid = apinfo.uid;  					    // 进程名  					    String processName = apinfo.processName;  					    // 占用的内存  					    int[] pids = new int[] {pid};  					    Debug.MemoryInfo[] memoryInfo = activityManger.getProcessMemoryInfo(pids);  					    int memorySize = memoryInfo[0].dalvikPrivateDirty;  //					    String currentmemorySize = UnitUtils.formatFileSize(memorySize*1024);//					   TranseTools.infoHint(context,"processName="+processName+",pid="+pid+",uid="+uid+",memorySize="+currentmemorySize);  					    return true;				    }				}			}		}				QLog.error("该应用已经不再运行");		TranseTools.infoHint(context, "该应用已经不再运行");		return false;	}		public static boolean isPackageManagerAvailable(Context context,String action) {        if (context == null) return false;		final PackageManager packageManager= context.getPackageManager();		Intent intent = new Intent(action);		List<ResolveInfo> list = packageManager.queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY);		return list.size()>0;	}		/*public static void goToWebView(Activity pActvity,String purl,String ptitle){		goToWebView(pActvity,purl,ptitle,"");	}		public static void goToWebView(Activity pActvity,String purl,String ptitle,String enableshare ){        if (pActvity == null) return;        Intent t = new Intent(pActvity, CommonWebViewActivity.class);		t.putExtra("web_title", ptitle);		t.putExtra("web_url",purl);		t.putExtra(FinalString.SHARE_REDPACKAGE, enableshare);		pActvity.startActivity(t);		pActvity.overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left);	}*/}